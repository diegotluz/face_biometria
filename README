Segue abaixo um modelo completo de README em Markdown para o seu projeto de reconhecimento facial, abordando o objetivo, os desafios, as soluções encontradas, os resultados e as instruções de execução:

------------------------------------------------------------

# Sistema Biométrico Pro

Este projeto implementa um sistema de reconhecimento facial com verificação de vivacidade (liveness) utilizando webcam, OpenCV, MediaPipe e machine learning. Ele captura imagens em tempo real, extrai características faciais (embeddings) e compara com um banco de dados de rostos cadastrados para autenticação. Além disso, desenha um retângulo ao redor do rosto detectado para facilitar a validação visual do usuário.

## Objetivo

- **Reconhecimento Facial:** Detectar e identificar um usuário com base em imagens capturadas pela webcam.
- **Verificação de Vivacidade:** Impedir spoofing utilizando medidas como a contagem de piscadas (Eye Aspect Ratio – EAR).
- **Feedback Visual:** Exibir o status do reconhecimento (usuário, nível de confiança e número de piscadas) sobrepondo um retângulo ao redor do rosto.
- **Ambiente Colab:** Adaptar a interface para execução em Google Colab, utilizando código JavaScript para captura e `cv2_imshow` para exibição.

## Descrição do Projeto

O sistema é composto pelos seguintes módulos:

- **Captura e Processamento:**  
  - A webcam é acessada via JavaScript no Colab.
  - As imagens são transmitidas para o ambiente Python usando base64.
  - As imagens são redimensionadas e processadas com MediaPipe para extrair landmarks faciais.

- **Extração de Embeddings:**  
  - São extraídos vetores de características (embeddings) a partir de pontos faciais (landmarks), que servem para representar numericamente o rosto.

- **Treinamento de Modelo:**  
  - O sistema monta pares positivos e negativos entre embeddings de rostos do banco de dados (diretório `known_faces`) e treina um classificador (Gradient Boosting) para determinar a similaridade.

- **Verificação de Vivacidade:**  
  - Implementado por meio do cálculo do Eye Aspect Ratio (EAR) para detectar piscadas e confirmar a vivacidade do usuário.

- **Exibição e Interface:**  
  - Um retângulo é desenhado sobre o rosto com coordenadas convertidas de valores normalizados para pixels, garantindo que o rosto seja delineado corretamente.
  - O status do reconhecimento também é enviado de volta via JavaScript, proporcionando feedback em tempo real.

## Desafios e Soluções

### Desafios Encontrados
- **Qualidade de Captura:**  
  Problemas de iluminação, ângulos inadequados ou baixa resolução podem prejudicar a detecção facial.

- **Banco de Dados Insuficiente:**  
  Para um treinamento robusto, é necessário ter pelo menos 2 pessoas cadastradas e 3 imagens por pessoa.

- **Erro de Spoofing:**  
  A autenticação precisa confirmar que o rosto apresentado é de um usuário real, utilizando verificação de piscadas, por exemplo.

- **Exibição no Google Colab:**  
  Como o `cv2.imshow` não funciona no Colab, a exibição foi adaptada com `cv2_imshow` e interface em JavaScript para captura do vídeo.

### Soluções Implementadas
- **Validação do Banco de Dados:**  
  O código verifica se existem pelo menos 2 pessoas e um mínimo de 3 imagens por cada uma antes de prosseguir para o treinamento.

- **Extração e Normalização:**  
  As imagens são redimensionadas e normalizadas, e as landmarks são extraídas com MediaPipe para criar os embeddings.

- **Contador de Piscadas (Liveness):**  
  O EAR é calculado a partir dos pontos dos olhos para contar piscadas e garantir que o usuário seja real.

- **Interface Web Adaptada:**  
  Utilizamos código JavaScript para criar elementos DOM e capturar o stream da webcam no Colab, enviando os frames para o Python em tempo real.

- **Desenho do Retângulo:**  
  As coordenadas dos landmarks são convertidas de valores normalizados para pixels, ajustando os limites para que o retângulo fique visível e posicionado corretamente.

## Resultados Obtidos

- **Reconhecimento em Tempo Real:**  
  O sistema identifica e autentica o rosto do usuário em tempo real, exibindo um retângulo ao redor do rosto e status atualizado (usuário reconhecido, nível de confiança e número de piscadas).

- **Precisão Adequada:**  
  Com o treinamento realizado com embeddings extraídos dos rostos cadastrados, o classificador consegue diferenciar entre rostos conhecidos e desconhecidos com boa confiabilidade.

- **Verificação de Liveness:**  
  A implementação do EAR permite evitar spoofing com imagens estáticas, garantindo que apenas rostos vivos sejam autenticados.

## Como Executar

### Pré-requisitos

- **Ambiente:**  
  Python 3.x; Preferencialmente executar no Google Colab para facilitar o uso da webcam.

- **Dependências:**  
  Execute o comando abaixo para instalar as bibliotecas necessárias:
  ```bash
  pip install mediapipe scikit-learn opencv-python
  ```

- **Estrutura de Diretórios:**  
  Organize seus dados criando uma pasta `known_faces` com subpastas para cada pessoa. Por exemplo:
  ```
  known_faces/
      pessoa1/
          foto1.jpg
          foto2.jpg
          foto3.jpg
      pessoa2/
          foto1.jpg
          foto2.jpg
          foto3.jpg
  ```

### Passos para Execução

1. **Clone o Repositório:**
   ```bash
   git clone https://github.com/seu_usuario/nome_do_repositorio.git
   cd nome_do_repositorio
   ```
2. **Carregue o Notebook no Google Colab:**  
   Faça o upload do arquivo contendo o código (dividido em blocos conforme apresentado) e execute os blocos na ordem.

3. **Permita o Acesso à Webcam:**  
   Quando solicitado, autorize o Colab a acessar a webcam do seu dispositivo.

4. **Execução do Sistema:**  
   O script capturará frames em tempo real, processará o vídeo, desenhará um retângulo em torno do rosto detectado e exibirá o status (usuário, confiança e piscadas) na interface.

5. **Encerramento:**  
   Para finalizar o sistema, pressione a tecla `q` ou clique na área designada para interromper a transmissão pelo JavaScript.

------------------------------------------------------------

## Contribuições

Sinta-se à vontade para enviar issues, sugestões ou pull requests visando melhorias e novas funcionalidades. Este é um projeto em constante evolução e colaborações são bem-vindas.

------------------------------------------------------------

## Licença

Este projeto está licenciado sob a [MIT License](LICENSE).

------------------------------------------------------------

Este README cobre os principais aspectos do projeto, os desafios encontrados e as soluções implementadas, bem como as instruções para instalação e execução. Basta adaptar os detalhes específicos (como links de repositório ou nome do usuário) conforme a sua necessidade.